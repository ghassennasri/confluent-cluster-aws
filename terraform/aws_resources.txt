data.external.myipaddr: Reading...
data.external.myipaddr: Read complete after 0s [id=-]
data.aws_key_pair.my-key: Reading...
data.aws_ami.ubuntu_linux: Reading...
module.vpc.data.aws_iam_policy_document.flow_log_cloudwatch_assume_role[0]: Reading...
module.vpc.data.aws_iam_policy_document.vpc_flow_log_cloudwatch[0]: Reading...
module.vpc.data.aws_iam_policy_document.flow_log_cloudwatch_assume_role[0]: Read complete after 0s [id=1021377347]
module.vpc.data.aws_iam_policy_document.vpc_flow_log_cloudwatch[0]: Read complete after 0s [id=2053943846]
data.aws_key_pair.my-key: Read complete after 0s [id=key-0b7b9810319315d5c]
data.aws_ami.ubuntu_linux: Read complete after 0s [id=ami-0f7559f51d3a22167]

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # module.kafka["kafka-1"].aws_instance.this[0] will be created
  + resource "aws_instance" "this" {
      + ami                                  = "ami-0f7559f51d3a22167"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = "eu-west-3a"
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t3.large"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "gnasri"
      + monitoring                           = false
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Environment" = "staging"
          + "Name"        = "kafka-1"
          + "Owner"       = "confluent user"
        }
      + tags_all                             = {
          + "Environment" = "staging"
          + "Name"        = "kafka-1"
          + "Owner"       = "confluent user"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = "IyEvYmluL2Jhc2ggLXhlCmV4ZWMgPiA+KHRlZSAvdmFyL2xvZy91c2VyLWRhdGEubG9nfGxvZ2dlciAtdCB1c2VyLWRhdGEgLXMgMj4vZGV2L2NvbnNvbGUpIDI+JjEKI2FwdCB1cGRhdGUgJiYgYXB0IHVwZ3JhZGUgLXkKYXB0IHVwZGF0ZSAteQojaW5zdGFsbCBqZGsgMTEKYXB0LWdldCBpbnN0YWxsIC15IG9wZW5qZGstMTEtanJlLWhlYWRsZXNzCiNBZGQgY29uZmx1ZW50IHJlcG9zaXRvcnkgdG8gYXB0IAojd2dldCAtcU8gLSBodHRwczovL3BhY2thZ2VzLmNvbmZsdWVudC5pby9kZWIvNy4yL2FyY2hpdmUua2V5IHwgYXB0LWtleSBhZGQgLQojYWRkLWFwdC1yZXBvc2l0b3J5IC15IFwKIyAgICAiZGViIFthcmNoPWFtZDY0XSBodHRwczovL3BhY2thZ2VzLmNvbmZsdWVudC5pby9kZWIvNy4yIHN0YWJsZSBtYWluIiAmJiBcCiMgICAgYXB0LWdldCB1cGRhdGUgLXkKI2luc3RhbGwgY29uZmx1ZW50IHBsYXRmb3JtCQojYXB0LWdldCBpbnN0YWxsIC15IFwKIyAgICBjb25mbHVlbnQtcGxhdGZvcm0gXAojICAgIGNvbmZsdWVudC1zZWN1cml0eQoKI2luc3RhbGwgcHl0aG9uIDMKYWRkLWFwdC1yZXBvc2l0b3J5IC15IHBwYTpkZWFkc25ha2VzL3BwYQkKYXB0LWdldCB1cGRhdGUgLXkKYXB0LWdldCBpbnN0YWxsIHB5dGhvbjMuOCAteQojaW5zdGFsbCBwaXAKY3VybCBodHRwczovL2Jvb3RzdHJhcC5weXBhLmlvL2dldC1waXAucHkgLW8gZ2V0LXBpcC5weQojaW5zdGFsbCBhbnNpYmxlIDIuMTEKcHl0aG9uMyAtbSBwaXAgaW5zdGFsbCAtLXVzZXIgYW5zaWJsZS1jb3JlPT0yLjEx"
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification {
          + capacity_reservation_preference = (known after apply)

          + capacity_reservation_target {
              + capacity_reservation_id                 = (known after apply)
              + capacity_reservation_resource_group_arn = (known after apply)
            }
        }

      + credit_specification {}

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + enclave_options {
          + enabled = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + maintenance_options {
          + auto_recovery = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = "enabled"
          + http_put_response_hop_limit = 1
          + http_tokens                 = "optional"
          + instance_metadata_tags      = "disabled"
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_card_index    = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + private_dns_name_options {
          + enable_resource_name_dns_a_record    = (known after apply)
          + enable_resource_name_dns_aaaa_record = (known after apply)
          + hostname_type                        = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = false
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + tags                  = {
              + "Name" = "kafka-1"
            }
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = "gp2"
        }

      + timeouts {}
    }

  # module.kafka["kafka-2"].aws_instance.this[0] will be created
  + resource "aws_instance" "this" {
      + ami                                  = "ami-0f7559f51d3a22167"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = "eu-west-3b"
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t3.large"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "gnasri"
      + monitoring                           = false
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Environment" = "staging"
          + "Name"        = "kafka-2"
          + "Owner"       = "confluent user"
        }
      + tags_all                             = {
          + "Environment" = "staging"
          + "Name"        = "kafka-2"
          + "Owner"       = "confluent user"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = "IyEvYmluL2Jhc2ggLXhlCmV4ZWMgPiA+KHRlZSAvdmFyL2xvZy91c2VyLWRhdGEubG9nfGxvZ2dlciAtdCB1c2VyLWRhdGEgLXMgMj4vZGV2L2NvbnNvbGUpIDI+JjEKI2FwdCB1cGRhdGUgJiYgYXB0IHVwZ3JhZGUgLXkKYXB0IHVwZGF0ZSAteQojaW5zdGFsbCBqZGsgMTEKYXB0LWdldCBpbnN0YWxsIC15IG9wZW5qZGstMTEtanJlLWhlYWRsZXNzCiNBZGQgY29uZmx1ZW50IHJlcG9zaXRvcnkgdG8gYXB0IAojd2dldCAtcU8gLSBodHRwczovL3BhY2thZ2VzLmNvbmZsdWVudC5pby9kZWIvNy4yL2FyY2hpdmUua2V5IHwgYXB0LWtleSBhZGQgLQojYWRkLWFwdC1yZXBvc2l0b3J5IC15IFwKIyAgICAiZGViIFthcmNoPWFtZDY0XSBodHRwczovL3BhY2thZ2VzLmNvbmZsdWVudC5pby9kZWIvNy4yIHN0YWJsZSBtYWluIiAmJiBcCiMgICAgYXB0LWdldCB1cGRhdGUgLXkKI2luc3RhbGwgY29uZmx1ZW50IHBsYXRmb3JtCQojYXB0LWdldCBpbnN0YWxsIC15IFwKIyAgICBjb25mbHVlbnQtcGxhdGZvcm0gXAojICAgIGNvbmZsdWVudC1zZWN1cml0eQoKI2luc3RhbGwgcHl0aG9uIDMKYWRkLWFwdC1yZXBvc2l0b3J5IC15IHBwYTpkZWFkc25ha2VzL3BwYQkKYXB0LWdldCB1cGRhdGUgLXkKYXB0LWdldCBpbnN0YWxsIHB5dGhvbjMuOCAteQojaW5zdGFsbCBwaXAKY3VybCBodHRwczovL2Jvb3RzdHJhcC5weXBhLmlvL2dldC1waXAucHkgLW8gZ2V0LXBpcC5weQojaW5zdGFsbCBhbnNpYmxlIDIuMTEKcHl0aG9uMyAtbSBwaXAgaW5zdGFsbCAtLXVzZXIgYW5zaWJsZS1jb3JlPT0yLjEx"
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification {
          + capacity_reservation_preference = (known after apply)

          + capacity_reservation_target {
              + capacity_reservation_id                 = (known after apply)
              + capacity_reservation_resource_group_arn = (known after apply)
            }
        }

      + credit_specification {}

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + enclave_options {
          + enabled = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + maintenance_options {
          + auto_recovery = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = "enabled"
          + http_put_response_hop_limit = 1
          + http_tokens                 = "optional"
          + instance_metadata_tags      = "disabled"
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_card_index    = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + private_dns_name_options {
          + enable_resource_name_dns_a_record    = (known after apply)
          + enable_resource_name_dns_aaaa_record = (known after apply)
          + hostname_type                        = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = false
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + tags                  = {
              + "Name" = "kafka-2"
            }
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = "gp2"
        }

      + timeouts {}
    }

  # module.kafka["kafka-3"].aws_instance.this[0] will be created
  + resource "aws_instance" "this" {
      + ami                                  = "ami-0f7559f51d3a22167"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = "eu-west-3c"
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t3.large"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "gnasri"
      + monitoring                           = false
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Environment" = "staging"
          + "Name"        = "kafka-3"
          + "Owner"       = "confluent user"
        }
      + tags_all                             = {
          + "Environment" = "staging"
          + "Name"        = "kafka-3"
          + "Owner"       = "confluent user"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = "IyEvYmluL2Jhc2ggLXhlCmV4ZWMgPiA+KHRlZSAvdmFyL2xvZy91c2VyLWRhdGEubG9nfGxvZ2dlciAtdCB1c2VyLWRhdGEgLXMgMj4vZGV2L2NvbnNvbGUpIDI+JjEKI2FwdCB1cGRhdGUgJiYgYXB0IHVwZ3JhZGUgLXkKYXB0IHVwZGF0ZSAteQojaW5zdGFsbCBqZGsgMTEKYXB0LWdldCBpbnN0YWxsIC15IG9wZW5qZGstMTEtanJlLWhlYWRsZXNzCiNBZGQgY29uZmx1ZW50IHJlcG9zaXRvcnkgdG8gYXB0IAojd2dldCAtcU8gLSBodHRwczovL3BhY2thZ2VzLmNvbmZsdWVudC5pby9kZWIvNy4yL2FyY2hpdmUua2V5IHwgYXB0LWtleSBhZGQgLQojYWRkLWFwdC1yZXBvc2l0b3J5IC15IFwKIyAgICAiZGViIFthcmNoPWFtZDY0XSBodHRwczovL3BhY2thZ2VzLmNvbmZsdWVudC5pby9kZWIvNy4yIHN0YWJsZSBtYWluIiAmJiBcCiMgICAgYXB0LWdldCB1cGRhdGUgLXkKI2luc3RhbGwgY29uZmx1ZW50IHBsYXRmb3JtCQojYXB0LWdldCBpbnN0YWxsIC15IFwKIyAgICBjb25mbHVlbnQtcGxhdGZvcm0gXAojICAgIGNvbmZsdWVudC1zZWN1cml0eQoKI2luc3RhbGwgcHl0aG9uIDMKYWRkLWFwdC1yZXBvc2l0b3J5IC15IHBwYTpkZWFkc25ha2VzL3BwYQkKYXB0LWdldCB1cGRhdGUgLXkKYXB0LWdldCBpbnN0YWxsIHB5dGhvbjMuOCAteQojaW5zdGFsbCBwaXAKY3VybCBodHRwczovL2Jvb3RzdHJhcC5weXBhLmlvL2dldC1waXAucHkgLW8gZ2V0LXBpcC5weQojaW5zdGFsbCBhbnNpYmxlIDIuMTEKcHl0aG9uMyAtbSBwaXAgaW5zdGFsbCAtLXVzZXIgYW5zaWJsZS1jb3JlPT0yLjEx"
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification {
          + capacity_reservation_preference = (known after apply)

          + capacity_reservation_target {
              + capacity_reservation_id                 = (known after apply)
              + capacity_reservation_resource_group_arn = (known after apply)
            }
        }

      + credit_specification {}

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + enclave_options {
          + enabled = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + maintenance_options {
          + auto_recovery = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = "enabled"
          + http_put_response_hop_limit = 1
          + http_tokens                 = "optional"
          + instance_metadata_tags      = "disabled"
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_card_index    = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + private_dns_name_options {
          + enable_resource_name_dns_a_record    = (known after apply)
          + enable_resource_name_dns_aaaa_record = (known after apply)
          + hostname_type                        = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = false
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + tags                  = {
              + "Name" = "kafka-3"
            }
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = "gp2"
        }

      + timeouts {}
    }

  # module.security_group_kafka.aws_security_group.this_name_prefix[0] will be created
  + resource "aws_security_group" "this_name_prefix" {
      + arn                    = (known after apply)
      + description            = "Security group for example usage with EC2 instance"
      + egress                 = (known after apply)
      + id                     = (known after apply)
      + ingress                = (known after apply)
      + name                   = (known after apply)
      + name_prefix            = "staging-kafka-"
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Environment" = "staging"
          + "Name"        = "staging-kafka"
          + "Owner"       = "confluent user"
        }
      + tags_all               = {
          + "Environment" = "staging"
          + "Name"        = "staging-kafka"
          + "Owner"       = "confluent user"
        }
      + vpc_id                 = (known after apply)

      + timeouts {
          + create = "10m"
          + delete = "15m"
        }
    }

  # module.security_group_kafka.aws_security_group_rule.egress_rules[0] will be created
  + resource "aws_security_group_rule" "egress_rules" {
      + cidr_blocks              = [
          + "0.0.0.0/0",
        ]
      + description              = "All protocols"
      + from_port                = -1
      + id                       = (known after apply)
      + ipv6_cidr_blocks         = [
          + "::/0",
        ]
      + prefix_list_ids          = []
      + protocol                 = "-1"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = -1
      + type                     = "egress"
    }

  # module.security_group_kafka.aws_security_group_rule.ingress_rules[0] will be created
  + resource "aws_security_group_rule" "ingress_rules" {
      + cidr_blocks              = [
          + "52.47.47.201/32",
          + "0.0.0.0/32",
        ]
      + description              = "SSH"
      + from_port                = 22
      + id                       = (known after apply)
      + ipv6_cidr_blocks         = []
      + prefix_list_ids          = []
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 22
      + type                     = "ingress"
    }

  # module.security_group_kafka.aws_security_group_rule.ingress_rules[1] will be created
  + resource "aws_security_group_rule" "ingress_rules" {
      + cidr_blocks              = [
          + "52.47.47.201/32",
          + "0.0.0.0/32",
        ]
      + description              = "Kafka broker 0.8.2+"
      + from_port                = 9092
      + id                       = (known after apply)
      + ipv6_cidr_blocks         = []
      + prefix_list_ids          = []
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 9092
      + type                     = "ingress"
    }

  # module.security_group_kafka.aws_security_group_rule.ingress_rules[2] will be created
  + resource "aws_security_group_rule" "ingress_rules" {
      + cidr_blocks              = [
          + "52.47.47.201/32",
          + "0.0.0.0/32",
        ]
      + description              = "Kafka TLS enabled broker 0.8.2+"
      + from_port                = 9094
      + id                       = (known after apply)
      + ipv6_cidr_blocks         = []
      + prefix_list_ids          = []
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 9094
      + type                     = "ingress"
    }

  # module.security_group_kafka.aws_security_group_rule.ingress_rules[3] will be created
  + resource "aws_security_group_rule" "ingress_rules" {
      + cidr_blocks              = [
          + "52.47.47.201/32",
          + "0.0.0.0/32",
        ]
      + description              = "Kafka JMX Exporter"
      + from_port                = 11001
      + id                       = (known after apply)
      + ipv6_cidr_blocks         = []
      + prefix_list_ids          = []
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 11001
      + type                     = "ingress"
    }

  # module.security_group_kafka.aws_security_group_rule.ingress_with_cidr_blocks[0] will be created
  + resource "aws_security_group_rule" "ingress_with_cidr_blocks" {
      + cidr_blocks              = [
          + "20.10.0.0/16",
        ]
      + description              = "Inter-broker listener"
      + from_port                = 9091
      + id                       = (known after apply)
      + prefix_list_ids          = []
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 9091
      + type                     = "ingress"
    }

  # module.security_group_kafka.aws_security_group_rule.ingress_with_cidr_blocks[1] will be created
  + resource "aws_security_group_rule" "ingress_with_cidr_blocks" {
      + cidr_blocks              = [
          + "20.10.0.0/16",
        ]
      + description              = "kafka default external plaintext listener"
      + from_port                = 9092
      + id                       = (known after apply)
      + prefix_list_ids          = []
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 9092
      + type                     = "ingress"
    }

  # module.security_group_kafka.aws_security_group_rule.ingress_with_cidr_blocks[2] will be created
  + resource "aws_security_group_rule" "ingress_with_cidr_blocks" {
      + cidr_blocks              = [
          + "20.10.0.0/16",
        ]
      + description              = "Metadata Service (MDS)/Confluent Server REST API"
      + from_port                = 8090
      + id                       = (known after apply)
      + prefix_list_ids          = []
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 8090
      + type                     = "ingress"
    }

  # module.security_group_kafka.aws_security_group_rule.ingress_with_cidr_blocks[3] will be created
  + resource "aws_security_group_rule" "ingress_with_cidr_blocks" {
      + cidr_blocks              = [
          + "20.10.0.0/16",
        ]
      + description              = "kafka TLS listener"
      + from_port                = 9094
      + id                       = (known after apply)
      + prefix_list_ids          = []
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 9094
      + type                     = "ingress"
    }

  # module.security_group_kafka.aws_security_group_rule.ingress_with_cidr_blocks[4] will be created
  + resource "aws_security_group_rule" "ingress_with_cidr_blocks" {
      + cidr_blocks              = [
          + "20.10.0.0/16",
        ]
      + description              = "kafka JMX exporter"
      + from_port                = 11001
      + id                       = (known after apply)
      + prefix_list_ids          = []
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 11001
      + type                     = "ingress"
    }

  # module.security_group_kafka.aws_security_group_rule.ingress_with_cidr_blocks[5] will be created
  + resource "aws_security_group_rule" "ingress_with_cidr_blocks" {
      + cidr_blocks              = [
          + "20.10.0.0/16",
        ]
      + description              = "kafka JMX exporter"
      + from_port                = 11002
      + id                       = (known after apply)
      + prefix_list_ids          = []
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 11002
      + type                     = "ingress"
    }

  # module.security_group_zookeeper.aws_security_group.this_name_prefix[0] will be created
  + resource "aws_security_group" "this_name_prefix" {
      + arn                    = (known after apply)
      + description            = "Security group for example usage with EC2 instance"
      + egress                 = (known after apply)
      + id                     = (known after apply)
      + ingress                = (known after apply)
      + name                   = (known after apply)
      + name_prefix            = "staging-kafka-"
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Environment" = "staging"
          + "Name"        = "staging-kafka"
          + "Owner"       = "confluent user"
        }
      + tags_all               = {
          + "Environment" = "staging"
          + "Name"        = "staging-kafka"
          + "Owner"       = "confluent user"
        }
      + vpc_id                 = (known after apply)

      + timeouts {
          + create = "10m"
          + delete = "15m"
        }
    }

  # module.security_group_zookeeper.aws_security_group_rule.egress_rules[0] will be created
  + resource "aws_security_group_rule" "egress_rules" {
      + cidr_blocks              = [
          + "0.0.0.0/0",
        ]
      + description              = "All protocols"
      + from_port                = -1
      + id                       = (known after apply)
      + ipv6_cidr_blocks         = [
          + "::/0",
        ]
      + prefix_list_ids          = []
      + protocol                 = "-1"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = -1
      + type                     = "egress"
    }

  # module.security_group_zookeeper.aws_security_group_rule.ingress_rules[0] will be created
  + resource "aws_security_group_rule" "ingress_rules" {
      + cidr_blocks              = [
          + "52.47.47.201/32",
          + "0.0.0.0/0",
        ]
      + description              = "SSH"
      + from_port                = 22
      + id                       = (known after apply)
      + ipv6_cidr_blocks         = []
      + prefix_list_ids          = []
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 22
      + type                     = "ingress"
    }

  # module.security_group_zookeeper.aws_security_group_rule.ingress_rules[1] will be created
  + resource "aws_security_group_rule" "ingress_rules" {
      + cidr_blocks              = [
          + "52.47.47.201/32",
          + "0.0.0.0/0",
        ]
      + description              = "Zookeeper"
      + from_port                = 2181
      + id                       = (known after apply)
      + ipv6_cidr_blocks         = []
      + prefix_list_ids          = []
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 2181
      + type                     = "ingress"
    }

  # module.security_group_zookeeper.aws_security_group_rule.ingress_rules[2] will be created
  + resource "aws_security_group_rule" "ingress_rules" {
      + cidr_blocks              = [
          + "52.47.47.201/32",
          + "0.0.0.0/0",
        ]
      + description              = "JMX"
      + from_port                = 7199
      + id                       = (known after apply)
      + ipv6_cidr_blocks         = []
      + prefix_list_ids          = []
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 7199
      + type                     = "ingress"
    }

  # module.security_group_zookeeper.aws_security_group_rule.ingress_with_cidr_blocks[0] will be created
  + resource "aws_security_group_rule" "ingress_with_cidr_blocks" {
      + cidr_blocks              = [
          + "20.10.0.0/16",
        ]
      + description              = "zookeeper console"
      + from_port                = 2181
      + id                       = (known after apply)
      + prefix_list_ids          = []
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 2181
      + type                     = "ingress"
    }

  # module.security_group_zookeeper.aws_security_group_rule.ingress_with_cidr_blocks[1] will be created
  + resource "aws_security_group_rule" "ingress_with_cidr_blocks" {
      + cidr_blocks              = [
          + "20.10.0.0/16",
        ]
      + description              = "Client access via TLS"
      + from_port                = 2182
      + id                       = (known after apply)
      + prefix_list_ids          = []
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 2182
      + type                     = "ingress"
    }

  # module.security_group_zookeeper.aws_security_group_rule.ingress_with_cidr_blocks[2] will be created
  + resource "aws_security_group_rule" "ingress_with_cidr_blocks" {
      + cidr_blocks              = [
          + "20.10.0.0/16",
        ]
      + description              = "zookeeper-2888-tcp"
      + from_port                = 2888
      + id                       = (known after apply)
      + prefix_list_ids          = []
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 2888
      + type                     = "ingress"
    }

  # module.security_group_zookeeper.aws_security_group_rule.ingress_with_cidr_blocks[3] will be created
  + resource "aws_security_group_rule" "ingress_with_cidr_blocks" {
      + cidr_blocks              = [
          + "20.10.0.0/16",
        ]
      + description              = "zookeeper console"
      + from_port                = 3888
      + id                       = (known after apply)
      + prefix_list_ids          = []
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 3888
      + type                     = "ingress"
    }

  # module.security_group_zookeeper.aws_security_group_rule.ingress_with_cidr_blocks[4] will be created
  + resource "aws_security_group_rule" "ingress_with_cidr_blocks" {
      + cidr_blocks              = [
          + "20.10.0.0/16",
        ]
      + description              = "zookeeper JMX"
      + from_port                = 7199
      + id                       = (known after apply)
      + prefix_list_ids          = []
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 7199
      + type                     = "ingress"
    }

  # module.security_group_zookeeper.aws_security_group_rule.ingress_with_cidr_blocks[5] will be created
  + resource "aws_security_group_rule" "ingress_with_cidr_blocks" {
      + cidr_blocks              = [
          + "20.10.0.0/16",
        ]
      + description              = "Jolokia"
      + from_port                = 7770
      + id                       = (known after apply)
      + prefix_list_ids          = []
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 7770
      + type                     = "ingress"
    }

  # module.vpc.aws_cloudwatch_log_group.flow_log[0] will be created
  + resource "aws_cloudwatch_log_group" "flow_log" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + name              = (known after apply)
      + retention_in_days = 0
      + tags              = {
          + "Environment" = "staging"
          + "Name"        = "staging-kafka"
          + "Owner"       = "confluent user"
        }
      + tags_all          = {
          + "Environment" = "staging"
          + "Name"        = "staging-kafka"
          + "Owner"       = "confluent user"
        }
    }

  # module.vpc.aws_default_network_acl.this[0] will be created
  + resource "aws_default_network_acl" "this" {
      + arn                    = (known after apply)
      + default_network_acl_id = (known after apply)
      + id                     = (known after apply)
      + owner_id               = (known after apply)
      + tags                   = {
          + "Environment" = "staging"
          + "Name"        = "staging-kafka-default"
          + "Owner"       = "confluent user"
        }
      + tags_all               = {
          + "Environment" = "staging"
          + "Name"        = "staging-kafka-default"
          + "Owner"       = "confluent user"
        }
      + vpc_id                 = (known after apply)

      + egress {
          + action          = "allow"
          + from_port       = 0
          + ipv6_cidr_block = "::/0"
          + protocol        = "-1"
          + rule_no         = 101
          + to_port         = 0
        }
      + egress {
          + action     = "allow"
          + cidr_block = "0.0.0.0/0"
          + from_port  = 0
          + protocol   = "-1"
          + rule_no    = 100
          + to_port    = 0
        }

      + ingress {
          + action          = "allow"
          + from_port       = 0
          + ipv6_cidr_block = "::/0"
          + protocol        = "-1"
          + rule_no         = 101
          + to_port         = 0
        }
      + ingress {
          + action     = "allow"
          + cidr_block = "0.0.0.0/0"
          + from_port  = 0
          + protocol   = "-1"
          + rule_no    = 100
          + to_port    = 0
        }
    }

  # module.vpc.aws_default_route_table.default[0] will be created
  + resource "aws_default_route_table" "default" {
      + arn                    = (known after apply)
      + default_route_table_id = (known after apply)
      + id                     = (known after apply)
      + owner_id               = (known after apply)
      + route                  = (known after apply)
      + tags                   = {
          + "Environment" = "staging"
          + "Name"        = "staging-kafka-default"
          + "Owner"       = "confluent user"
        }
      + tags_all               = {
          + "Environment" = "staging"
          + "Name"        = "staging-kafka-default"
          + "Owner"       = "confluent user"
        }
      + vpc_id                 = (known after apply)

      + timeouts {
          + create = "5m"
          + update = "5m"
        }
    }

  # module.vpc.aws_default_security_group.this[0] will be created
  + resource "aws_default_security_group" "this" {
      + arn                    = (known after apply)
      + description            = (known after apply)
      + egress                 = (known after apply)
      + id                     = (known after apply)
      + ingress                = (known after apply)
      + name                   = (known after apply)
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Environment" = "staging"
          + "Name"        = "staging-kafka-default"
          + "Owner"       = "confluent user"
        }
      + tags_all               = {
          + "Environment" = "staging"
          + "Name"        = "staging-kafka-default"
          + "Owner"       = "confluent user"
        }
      + vpc_id                 = (known after apply)
    }

  # module.vpc.aws_eip.nat[0] will be created
  + resource "aws_eip" "nat" {
      + allocation_id        = (known after apply)
      + association_id       = (known after apply)
      + carrier_ip           = (known after apply)
      + customer_owned_ip    = (known after apply)
      + domain               = (known after apply)
      + id                   = (known after apply)
      + instance             = (known after apply)
      + network_border_group = (known after apply)
      + network_interface    = (known after apply)
      + private_dns          = (known after apply)
      + private_ip           = (known after apply)
      + public_dns           = (known after apply)
      + public_ip            = (known after apply)
      + public_ipv4_pool     = (known after apply)
      + tags                 = {
          + "Environment" = "staging"
          + "Name"        = "staging-kafka"
          + "Owner"       = "confluent user"
        }
      + tags_all             = {
          + "Environment" = "staging"
          + "Name"        = "staging-kafka"
          + "Owner"       = "confluent user"
        }
      + vpc                  = true
    }

  # module.vpc.aws_flow_log.this[0] will be created
  + resource "aws_flow_log" "this" {
      + arn                      = (known after apply)
      + iam_role_arn             = (known after apply)
      + id                       = (known after apply)
      + log_destination          = (known after apply)
      + log_destination_type     = "cloud-watch-logs"
      + log_format               = (known after apply)
      + log_group_name           = (known after apply)
      + max_aggregation_interval = 60
      + tags                     = {
          + "Environment" = "staging"
          + "Name"        = "staging-kafka"
          + "Owner"       = "confluent user"
        }
      + tags_all                 = {
          + "Environment" = "staging"
          + "Name"        = "staging-kafka"
          + "Owner"       = "confluent user"
        }
      + traffic_type             = "ALL"
      + vpc_id                   = (known after apply)
    }

  # module.vpc.aws_iam_policy.vpc_flow_log_cloudwatch[0] will be created
  + resource "aws_iam_policy" "vpc_flow_log_cloudwatch" {
      + arn         = (known after apply)
      + id          = (known after apply)
      + name        = (known after apply)
      + name_prefix = "vpc-flow-log-to-cloudwatch-"
      + path        = "/"
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "logs:PutLogEvents",
                          + "logs:DescribeLogStreams",
                          + "logs:DescribeLogGroups",
                          + "logs:CreateLogStream",
                        ]
                      + Effect   = "Allow"
                      + Resource = "*"
                      + Sid      = "AWSVPCFlowLogsPushToCloudWatch"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + policy_id   = (known after apply)
      + tags        = {
          + "Environment" = "staging"
          + "Name"        = "staging-kafka"
          + "Owner"       = "confluent user"
        }
      + tags_all    = {
          + "Environment" = "staging"
          + "Name"        = "staging-kafka"
          + "Owner"       = "confluent user"
        }
    }

  # module.vpc.aws_iam_role.vpc_flow_log_cloudwatch[0] will be created
  + resource "aws_iam_role" "vpc_flow_log_cloudwatch" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "vpc-flow-logs.amazonaws.com"
                        }
                      + Sid       = "AWSVPCFlowLogsAssumeRole"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = (known after apply)
      + name_prefix           = "vpc-flow-log-role-"
      + path                  = "/"
      + tags                  = {
          + "Environment" = "staging"
          + "Name"        = "staging-kafka"
          + "Owner"       = "confluent user"
        }
      + tags_all              = {
          + "Environment" = "staging"
          + "Name"        = "staging-kafka"
          + "Owner"       = "confluent user"
        }
      + unique_id             = (known after apply)

      + inline_policy {
          + name   = (known after apply)
          + policy = (known after apply)
        }
    }

  # module.vpc.aws_iam_role_policy_attachment.vpc_flow_log_cloudwatch[0] will be created
  + resource "aws_iam_role_policy_attachment" "vpc_flow_log_cloudwatch" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = (known after apply)
    }

  # module.vpc.aws_internet_gateway.this[0] will be created
  + resource "aws_internet_gateway" "this" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Environment" = "staging"
          + "Name"        = "staging-kafka"
          + "Owner"       = "confluent user"
        }
      + tags_all = {
          + "Environment" = "staging"
          + "Name"        = "staging-kafka"
          + "Owner"       = "confluent user"
        }
      + vpc_id   = (known after apply)
    }

  # module.vpc.aws_nat_gateway.this[0] will be created
  + resource "aws_nat_gateway" "this" {
      + allocation_id        = (known after apply)
      + connectivity_type    = "public"
      + id                   = (known after apply)
      + network_interface_id = (known after apply)
      + private_ip           = (known after apply)
      + public_ip            = (known after apply)
      + subnet_id            = (known after apply)
      + tags                 = {
          + "Environment" = "staging"
          + "Name"        = "staging-kafka"
          + "Owner"       = "confluent user"
        }
      + tags_all             = {
          + "Environment" = "staging"
          + "Name"        = "staging-kafka"
          + "Owner"       = "confluent user"
        }
    }

  # module.vpc.aws_route.private_nat_gateway[0] will be created
  + resource "aws_route" "private_nat_gateway" {
      + destination_cidr_block = "0.0.0.0/0"
      + id                     = (known after apply)
      + instance_id            = (known after apply)
      + instance_owner_id      = (known after apply)
      + nat_gateway_id         = (known after apply)
      + network_interface_id   = (known after apply)
      + origin                 = (known after apply)
      + route_table_id         = (known after apply)
      + state                  = (known after apply)

      + timeouts {
          + create = "5m"
        }
    }

  # module.vpc.aws_route.public_internet_gateway[0] will be created
  + resource "aws_route" "public_internet_gateway" {
      + destination_cidr_block = "0.0.0.0/0"
      + gateway_id             = (known after apply)
      + id                     = (known after apply)
      + instance_id            = (known after apply)
      + instance_owner_id      = (known after apply)
      + network_interface_id   = (known after apply)
      + origin                 = (known after apply)
      + route_table_id         = (known after apply)
      + state                  = (known after apply)

      + timeouts {
          + create = "5m"
        }
    }

  # module.vpc.aws_route_table.private[0] will be created
  + resource "aws_route_table" "private" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = (known after apply)
      + tags             = {
          + "Environment" = "staging"
          + "Name"        = "staging-kafka"
          + "Owner"       = "confluent user"
        }
      + tags_all         = {
          + "Environment" = "staging"
          + "Name"        = "staging-kafka"
          + "Owner"       = "confluent user"
        }
      + vpc_id           = (known after apply)
    }

  # module.vpc.aws_route_table.public[0] will be created
  + resource "aws_route_table" "public" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = (known after apply)
      + tags             = {
          + "Environment" = "staging"
          + "Name"        = "staging-kafka"
          + "Owner"       = "confluent user"
        }
      + tags_all         = {
          + "Environment" = "staging"
          + "Name"        = "staging-kafka"
          + "Owner"       = "confluent user"
        }
      + vpc_id           = (known after apply)
    }

  # module.vpc.aws_route_table_association.private[0] will be created
  + resource "aws_route_table_association" "private" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_route_table_association.private[1] will be created
  + resource "aws_route_table_association" "private" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_route_table_association.private[2] will be created
  + resource "aws_route_table_association" "private" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_route_table_association.public[0] will be created
  + resource "aws_route_table_association" "public" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_route_table_association.public[1] will be created
  + resource "aws_route_table_association" "public" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_route_table_association.public[2] will be created
  + resource "aws_route_table_association" "public" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_subnet.private[0] will be created
  + resource "aws_subnet" "private" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "eu-west-3a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "20.10.4.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Environment" = "staging"
          + "Name"        = "staging-kafka"
          + "Owner"       = "confluent user"
        }
      + tags_all                                       = {
          + "Environment" = "staging"
          + "Name"        = "staging-kafka"
          + "Owner"       = "confluent user"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_subnet.private[1] will be created
  + resource "aws_subnet" "private" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "eu-west-3b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "20.10.5.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Environment" = "staging"
          + "Name"        = "staging-kafka"
          + "Owner"       = "confluent user"
        }
      + tags_all                                       = {
          + "Environment" = "staging"
          + "Name"        = "staging-kafka"
          + "Owner"       = "confluent user"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_subnet.private[2] will be created
  + resource "aws_subnet" "private" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "eu-west-3c"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "20.10.6.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Environment" = "staging"
          + "Name"        = "staging-kafka"
          + "Owner"       = "confluent user"
        }
      + tags_all                                       = {
          + "Environment" = "staging"
          + "Name"        = "staging-kafka"
          + "Owner"       = "confluent user"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_subnet.public[0] will be created
  + resource "aws_subnet" "public" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "eu-west-3a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "20.10.1.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Environment" = "staging"
          + "Name"        = "staging-kafka"
          + "Owner"       = "confluent user"
        }
      + tags_all                                       = {
          + "Environment" = "staging"
          + "Name"        = "staging-kafka"
          + "Owner"       = "confluent user"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_subnet.public[1] will be created
  + resource "aws_subnet" "public" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "eu-west-3b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "20.10.2.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Environment" = "staging"
          + "Name"        = "staging-kafka"
          + "Owner"       = "confluent user"
        }
      + tags_all                                       = {
          + "Environment" = "staging"
          + "Name"        = "staging-kafka"
          + "Owner"       = "confluent user"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_subnet.public[2] will be created
  + resource "aws_subnet" "public" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "eu-west-3c"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "20.10.3.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Environment" = "staging"
          + "Name"        = "staging-kafka"
          + "Owner"       = "confluent user"
        }
      + tags_all                                       = {
          + "Environment" = "staging"
          + "Name"        = "staging-kafka"
          + "Owner"       = "confluent user"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_vpc.this[0] will be created
  + resource "aws_vpc" "this" {
      + arn                                  = (known after apply)
      + assign_generated_ipv6_cidr_block     = false
      + cidr_block                           = "20.10.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_classiclink                   = (known after apply)
      + enable_classiclink_dns_support       = (known after apply)
      + enable_dns_hostnames                 = true
      + enable_dns_support                   = true
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Environment" = "staging"
          + "Name"        = "staging-kafka"
          + "Owner"       = "confluent user"
        }
      + tags_all                             = {
          + "Environment" = "staging"
          + "Name"        = "staging-kafka"
          + "Owner"       = "confluent user"
        }
    }

  # module.zookeeper["zk-1"].aws_instance.this[0] will be created
  + resource "aws_instance" "this" {
      + ami                                  = "ami-0f7559f51d3a22167"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = "eu-west-3a"
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t3.large"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "gnasri"
      + monitoring                           = false
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Environment" = "staging"
          + "Name"        = "zk-1"
          + "Owner"       = "confluent user"
        }
      + tags_all                             = {
          + "Environment" = "staging"
          + "Name"        = "zk-1"
          + "Owner"       = "confluent user"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = "IyEvYmluL2Jhc2ggLXhlCmV4ZWMgPiA+KHRlZSAvdmFyL2xvZy91c2VyLWRhdGEubG9nfGxvZ2dlciAtdCB1c2VyLWRhdGEgLXMgMj4vZGV2L2NvbnNvbGUpIDI+JjEKI2FwdCB1cGRhdGUgJiYgYXB0IHVwZ3JhZGUgLXkKYXB0IHVwZGF0ZSAteQojaW5zdGFsbCBqZGsgMTEKYXB0LWdldCBpbnN0YWxsIC15IG9wZW5qZGstMTEtanJlLWhlYWRsZXNzCiNBZGQgY29uZmx1ZW50IHJlcG9zaXRvcnkgdG8gYXB0IAojd2dldCAtcU8gLSBodHRwczovL3BhY2thZ2VzLmNvbmZsdWVudC5pby9kZWIvNy4yL2FyY2hpdmUua2V5IHwgYXB0LWtleSBhZGQgLQojYWRkLWFwdC1yZXBvc2l0b3J5IC15IFwKIyAgICAiZGViIFthcmNoPWFtZDY0XSBodHRwczovL3BhY2thZ2VzLmNvbmZsdWVudC5pby9kZWIvNy4yIHN0YWJsZSBtYWluIiAmJiBcCiMgICAgYXB0LWdldCB1cGRhdGUgLXkKI2luc3RhbGwgY29uZmx1ZW50IHBsYXRmb3JtCQojYXB0LWdldCBpbnN0YWxsIC15IFwKIyAgICBjb25mbHVlbnQtcGxhdGZvcm0gXAojICAgIGNvbmZsdWVudC1zZWN1cml0eQoKI2luc3RhbGwgcHl0aG9uIDMKYWRkLWFwdC1yZXBvc2l0b3J5IC15IHBwYTpkZWFkc25ha2VzL3BwYQkKYXB0LWdldCB1cGRhdGUgLXkKYXB0LWdldCBpbnN0YWxsIHB5dGhvbjMuOCAteQojaW5zdGFsbCBwaXAKY3VybCBodHRwczovL2Jvb3RzdHJhcC5weXBhLmlvL2dldC1waXAucHkgLW8gZ2V0LXBpcC5weQojaW5zdGFsbCBhbnNpYmxlIDIuMTEKcHl0aG9uMyAtbSBwaXAgaW5zdGFsbCAtLXVzZXIgYW5zaWJsZS1jb3JlPT0yLjEx"
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification {
          + capacity_reservation_preference = (known after apply)

          + capacity_reservation_target {
              + capacity_reservation_id                 = (known after apply)
              + capacity_reservation_resource_group_arn = (known after apply)
            }
        }

      + credit_specification {}

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + enclave_options {
          + enabled = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + maintenance_options {
          + auto_recovery = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = "enabled"
          + http_put_response_hop_limit = 1
          + http_tokens                 = "optional"
          + instance_metadata_tags      = "disabled"
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_card_index    = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + private_dns_name_options {
          + enable_resource_name_dns_a_record    = (known after apply)
          + enable_resource_name_dns_aaaa_record = (known after apply)
          + hostname_type                        = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = false
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + tags                  = {
              + "Name" = "zk-1"
            }
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = "gp2"
        }

      + timeouts {}
    }

  # module.zookeeper["zk-2"].aws_instance.this[0] will be created
  + resource "aws_instance" "this" {
      + ami                                  = "ami-0f7559f51d3a22167"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = "eu-west-3b"
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t3.large"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "gnasri"
      + monitoring                           = false
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Environment" = "staging"
          + "Name"        = "zk-2"
          + "Owner"       = "confluent user"
        }
      + tags_all                             = {
          + "Environment" = "staging"
          + "Name"        = "zk-2"
          + "Owner"       = "confluent user"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = "IyEvYmluL2Jhc2ggLXhlCmV4ZWMgPiA+KHRlZSAvdmFyL2xvZy91c2VyLWRhdGEubG9nfGxvZ2dlciAtdCB1c2VyLWRhdGEgLXMgMj4vZGV2L2NvbnNvbGUpIDI+JjEKI2FwdCB1cGRhdGUgJiYgYXB0IHVwZ3JhZGUgLXkKYXB0IHVwZGF0ZSAteQojaW5zdGFsbCBqZGsgMTEKYXB0LWdldCBpbnN0YWxsIC15IG9wZW5qZGstMTEtanJlLWhlYWRsZXNzCiNBZGQgY29uZmx1ZW50IHJlcG9zaXRvcnkgdG8gYXB0IAojd2dldCAtcU8gLSBodHRwczovL3BhY2thZ2VzLmNvbmZsdWVudC5pby9kZWIvNy4yL2FyY2hpdmUua2V5IHwgYXB0LWtleSBhZGQgLQojYWRkLWFwdC1yZXBvc2l0b3J5IC15IFwKIyAgICAiZGViIFthcmNoPWFtZDY0XSBodHRwczovL3BhY2thZ2VzLmNvbmZsdWVudC5pby9kZWIvNy4yIHN0YWJsZSBtYWluIiAmJiBcCiMgICAgYXB0LWdldCB1cGRhdGUgLXkKI2luc3RhbGwgY29uZmx1ZW50IHBsYXRmb3JtCQojYXB0LWdldCBpbnN0YWxsIC15IFwKIyAgICBjb25mbHVlbnQtcGxhdGZvcm0gXAojICAgIGNvbmZsdWVudC1zZWN1cml0eQoKI2luc3RhbGwgcHl0aG9uIDMKYWRkLWFwdC1yZXBvc2l0b3J5IC15IHBwYTpkZWFkc25ha2VzL3BwYQkKYXB0LWdldCB1cGRhdGUgLXkKYXB0LWdldCBpbnN0YWxsIHB5dGhvbjMuOCAteQojaW5zdGFsbCBwaXAKY3VybCBodHRwczovL2Jvb3RzdHJhcC5weXBhLmlvL2dldC1waXAucHkgLW8gZ2V0LXBpcC5weQojaW5zdGFsbCBhbnNpYmxlIDIuMTEKcHl0aG9uMyAtbSBwaXAgaW5zdGFsbCAtLXVzZXIgYW5zaWJsZS1jb3JlPT0yLjEx"
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification {
          + capacity_reservation_preference = (known after apply)

          + capacity_reservation_target {
              + capacity_reservation_id                 = (known after apply)
              + capacity_reservation_resource_group_arn = (known after apply)
            }
        }

      + credit_specification {}

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + enclave_options {
          + enabled = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + maintenance_options {
          + auto_recovery = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = "enabled"
          + http_put_response_hop_limit = 1
          + http_tokens                 = "optional"
          + instance_metadata_tags      = "disabled"
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_card_index    = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + private_dns_name_options {
          + enable_resource_name_dns_a_record    = (known after apply)
          + enable_resource_name_dns_aaaa_record = (known after apply)
          + hostname_type                        = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = false
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + tags                  = {
              + "Name" = "zk-2"
            }
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = "gp2"
        }

      + timeouts {}
    }

  # module.zookeeper["zk-3"].aws_instance.this[0] will be created
  + resource "aws_instance" "this" {
      + ami                                  = "ami-0f7559f51d3a22167"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = "eu-west-3c"
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t3.large"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "gnasri"
      + monitoring                           = false
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Environment" = "staging"
          + "Name"        = "zk-3"
          + "Owner"       = "confluent user"
        }
      + tags_all                             = {
          + "Environment" = "staging"
          + "Name"        = "zk-3"
          + "Owner"       = "confluent user"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = "IyEvYmluL2Jhc2ggLXhlCmV4ZWMgPiA+KHRlZSAvdmFyL2xvZy91c2VyLWRhdGEubG9nfGxvZ2dlciAtdCB1c2VyLWRhdGEgLXMgMj4vZGV2L2NvbnNvbGUpIDI+JjEKI2FwdCB1cGRhdGUgJiYgYXB0IHVwZ3JhZGUgLXkKYXB0IHVwZGF0ZSAteQojaW5zdGFsbCBqZGsgMTEKYXB0LWdldCBpbnN0YWxsIC15IG9wZW5qZGstMTEtanJlLWhlYWRsZXNzCiNBZGQgY29uZmx1ZW50IHJlcG9zaXRvcnkgdG8gYXB0IAojd2dldCAtcU8gLSBodHRwczovL3BhY2thZ2VzLmNvbmZsdWVudC5pby9kZWIvNy4yL2FyY2hpdmUua2V5IHwgYXB0LWtleSBhZGQgLQojYWRkLWFwdC1yZXBvc2l0b3J5IC15IFwKIyAgICAiZGViIFthcmNoPWFtZDY0XSBodHRwczovL3BhY2thZ2VzLmNvbmZsdWVudC5pby9kZWIvNy4yIHN0YWJsZSBtYWluIiAmJiBcCiMgICAgYXB0LWdldCB1cGRhdGUgLXkKI2luc3RhbGwgY29uZmx1ZW50IHBsYXRmb3JtCQojYXB0LWdldCBpbnN0YWxsIC15IFwKIyAgICBjb25mbHVlbnQtcGxhdGZvcm0gXAojICAgIGNvbmZsdWVudC1zZWN1cml0eQoKI2luc3RhbGwgcHl0aG9uIDMKYWRkLWFwdC1yZXBvc2l0b3J5IC15IHBwYTpkZWFkc25ha2VzL3BwYQkKYXB0LWdldCB1cGRhdGUgLXkKYXB0LWdldCBpbnN0YWxsIHB5dGhvbjMuOCAteQojaW5zdGFsbCBwaXAKY3VybCBodHRwczovL2Jvb3RzdHJhcC5weXBhLmlvL2dldC1waXAucHkgLW8gZ2V0LXBpcC5weQojaW5zdGFsbCBhbnNpYmxlIDIuMTEKcHl0aG9uMyAtbSBwaXAgaW5zdGFsbCAtLXVzZXIgYW5zaWJsZS1jb3JlPT0yLjEx"
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification {
          + capacity_reservation_preference = (known after apply)

          + capacity_reservation_target {
              + capacity_reservation_id                 = (known after apply)
              + capacity_reservation_resource_group_arn = (known after apply)
            }
        }

      + credit_specification {}

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + enclave_options {
          + enabled = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + maintenance_options {
          + auto_recovery = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = "enabled"
          + http_put_response_hop_limit = 1
          + http_tokens                 = "optional"
          + instance_metadata_tags      = "disabled"
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_card_index    = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + private_dns_name_options {
          + enable_resource_name_dns_a_record    = (known after apply)
          + enable_resource_name_dns_aaaa_record = (known after apply)
          + hostname_type                        = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = false
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + tags                  = {
              + "Name" = "zk-3"
            }
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = "gp2"
        }

      + timeouts {}
    }

Plan: 57 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + kafka        = {
      + kafka-1 = {
          + arn                                = (known after apply)
          + capacity_reservation_specification = (known after apply)
          + id                                 = (known after apply)
          + instance_state                     = (known after apply)
          + ipv6_addresses                     = (known after apply)
          + outpost_arn                        = (known after apply)
          + password_data                      = (known after apply)
          + primary_network_interface_id       = (known after apply)
          + private_dns                        = (known after apply)
          + private_ip                         = (known after apply)
          + public_dns                         = (known after apply)
          + public_ip                          = (known after apply)
          + spot_bid_status                    = ""
          + spot_instance_id                   = ""
          + spot_request_state                 = ""
          + tags_all                           = {
              + "Environment" = "staging"
              + "Name"        = "kafka-1"
              + "Owner"       = "confluent user"
            }
        }
      + kafka-2 = {
          + arn                                = (known after apply)
          + capacity_reservation_specification = (known after apply)
          + id                                 = (known after apply)
          + instance_state                     = (known after apply)
          + ipv6_addresses                     = (known after apply)
          + outpost_arn                        = (known after apply)
          + password_data                      = (known after apply)
          + primary_network_interface_id       = (known after apply)
          + private_dns                        = (known after apply)
          + private_ip                         = (known after apply)
          + public_dns                         = (known after apply)
          + public_ip                          = (known after apply)
          + spot_bid_status                    = ""
          + spot_instance_id                   = ""
          + spot_request_state                 = ""
          + tags_all                           = {
              + "Environment" = "staging"
              + "Name"        = "kafka-2"
              + "Owner"       = "confluent user"
            }
        }
      + kafka-3 = {
          + arn                                = (known after apply)
          + capacity_reservation_specification = (known after apply)
          + id                                 = (known after apply)
          + instance_state                     = (known after apply)
          + ipv6_addresses                     = (known after apply)
          + outpost_arn                        = (known after apply)
          + password_data                      = (known after apply)
          + primary_network_interface_id       = (known after apply)
          + private_dns                        = (known after apply)
          + private_ip                         = (known after apply)
          + public_dns                         = (known after apply)
          + public_ip                          = (known after apply)
          + spot_bid_status                    = ""
          + spot_instance_id                   = ""
          + spot_request_state                 = ""
          + tags_all                           = {
              + "Environment" = "staging"
              + "Name"        = "kafka-3"
              + "Owner"       = "confluent user"
            }
        }
    }
  + my_public_ip = "52.47.47.201"
  + resource-ids = (known after apply)
  + zookeeper    = {
      + zk-1 = {
          + arn                                = (known after apply)
          + capacity_reservation_specification = (known after apply)
          + id                                 = (known after apply)
          + instance_state                     = (known after apply)
          + ipv6_addresses                     = (known after apply)
          + outpost_arn                        = (known after apply)
          + password_data                      = (known after apply)
          + primary_network_interface_id       = (known after apply)
          + private_dns                        = (known after apply)
          + private_ip                         = (known after apply)
          + public_dns                         = (known after apply)
          + public_ip                          = (known after apply)
          + spot_bid_status                    = ""
          + spot_instance_id                   = ""
          + spot_request_state                 = ""
          + tags_all                           = {
              + "Environment" = "staging"
              + "Name"        = "zk-1"
              + "Owner"       = "confluent user"
            }
        }
      + zk-2 = {
          + arn                                = (known after apply)
          + capacity_reservation_specification = (known after apply)
          + id                                 = (known after apply)
          + instance_state                     = (known after apply)
          + ipv6_addresses                     = (known after apply)
          + outpost_arn                        = (known after apply)
          + password_data                      = (known after apply)
          + primary_network_interface_id       = (known after apply)
          + private_dns                        = (known after apply)
          + private_ip                         = (known after apply)
          + public_dns                         = (known after apply)
          + public_ip                          = (known after apply)
          + spot_bid_status                    = ""
          + spot_instance_id                   = ""
          + spot_request_state                 = ""
          + tags_all                           = {
              + "Environment" = "staging"
              + "Name"        = "zk-2"
              + "Owner"       = "confluent user"
            }
        }
      + zk-3 = {
          + arn                                = (known after apply)
          + capacity_reservation_specification = (known after apply)
          + id                                 = (known after apply)
          + instance_state                     = (known after apply)
          + ipv6_addresses                     = (known after apply)
          + outpost_arn                        = (known after apply)
          + password_data                      = (known after apply)
          + primary_network_interface_id       = (known after apply)
          + private_dns                        = (known after apply)
          + private_ip                         = (known after apply)
          + public_dns                         = (known after apply)
          + public_ip                          = (known after apply)
          + spot_bid_status                    = ""
          + spot_instance_id                   = ""
          + spot_request_state                 = ""
          + tags_all                           = {
              + "Environment" = "staging"
              + "Name"        = "zk-3"
              + "Owner"       = "confluent user"
            }
        }
    }

─────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
