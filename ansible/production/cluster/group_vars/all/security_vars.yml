# code based on activity in the Confluent Ansible playbook offcial training
# Encrypt properties files at rest
secrets_protection_enabled: true
kafka_connect_secrets_protection_encrypt_properties:
  - config.providers.secret.param.master.encryption.key

# Override broker properties
kafka_broker_custom_properties:
  # For this course, we use LdapAuthenticateCallbackHandler
  #   for LDAP authentication over SASL/PLAIN
  listener.name.broker.plain.sasl.server.callback.handler.class: io.confluent.security.auth.provider.ldap.LdapAuthenticateCallbackHandler
  listener.name.client.plain.sasl.server.callback.handler.class: io.confluent.security.auth.provider.ldap.LdapAuthenticateCallbackHandler
  listener.name.controller.plain.sasl.server.callback.handler.class: io.confluent.security.auth.provider.ldap.LdapAuthenticateCallbackHandler
  # LDAP connection properties
  ldap.java.naming.factory.initial: com.sun.jndi.ldap.LdapCtxFactory
  ldap.com.sun.jndi.ldap.read.timeout: 3000
  ldap.java.naming.provider.url: ldaps://ldap.prod.confluent:636
  ldap.java.naming.security.protocol: SSL
  ldap.ssl.truststore.location: /var/ssl/private/kafka_broker.truststore.jks
  ldap.ssl.truststore.password: "{{vault_confluent_truststore_password}}"
  ldap.java.naming.security.principal: uid=mds,OU=rbac,DC=example,DC=com
  ldap.java.naming.security.credentials: "{{vault_mds_super_user_password}}"
  ldap.java.naming.security.authentication: simple
  # LDAP search properties for user and group search
  ldap.user.search.base: OU=rbac,DC=example,DC=com
  ldap.group.search.base: OU=rbac,DC=example,DC=com
  ldap.user.name.attribute: uid
  ldap.user.memberof.attribute.pattern: CN=(.*),OU=rbac,DC=example,DC=com
  ldap.group.name.attribute: cn
  ldap.group.member.attribute.pattern: CN=(.*),OU=rbac,DC=example,DC=com
  ldap.user.object.class: account

# In this course, we use SASL/PLAIN for authentication
sasl_protocol: plain
sasl_plain_users:
  admin:
    principal: kafka
    password: "{{ vault_kafka_broker_ldap_password }}"
  kafka:
    principal: kafka
    password: "{{ vault_kafka_broker_ldap_password }}"
  mds:
    principal: mds
    password: "{{vault_mds_super_user_password}}"
  client:
    principal: client
    password: "{{vault_client_password}}"
  schema_registry:
    principal: schema-registry
    password: "{{vault_schema_registry_ldap_password}}"
  kafka_connect:
    principal: kafka-connect
    password: "{{vault_kafka_connect_ldap_password}}"
  ksql:
    principal: ksql
    password: "{{vault_ksql_ldap_password}}"
  control_center:
    principal: control-center
    password: "{{vault_control_center_ldap_password}}"

# RBAC settings
rbac_enabled: true
# LDAP users and groups must already exist in your LDAP environment.

# Your mds super user which has the ability to bootstrap RBAC roles and permissions
mds_super_user: mds
mds_super_user_password: "{{vault_mds_super_user_password}}"


# LDAP credentials for other Confluent components
kafka_broker_ldap_user: kafka
kafka_broker_ldap_password: "{{vault_kafka_broker_ldap_password}}"

schema_registry_ldap_user: schema-registry
schema_registry_ldap_password: "{{vault_schema_registry_ldap_password}}"

kafka_rest_ldap_user: kafka-rest
kafka_rest_ldap_password: "{{vault_kafka_rest_ldap_password}}"

kafka_connect_ldap_user: kafka-connect
kafka_connect_ldap_password: "{{vault_kafka_connect_ldap_password}}"

ksql_ldap_user: ksqldb
ksql_ldap_password: "{{vault_ksql_ldap_password}}"

control_center_ldap_user: control-center
control_center_ldap_password: "{{vault_control_center_ldap_password}}"

# Allow the playbooks to configure additional users as system admins on the platform, set the list below
rbac_component_additional_system_admins:
  - user1
